// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/checkr/flagr/swagger_gen/models"
)

// GetFlagByNameBatchOKCode is the HTTP code returned for type GetFlagByNameBatchOK
const GetFlagByNameBatchOKCode int = 200

/*GetFlagByNameBatchOK returns list of flags with the given names. Omits flags who's names weren't found.

swagger:response getFlagByNameBatchOK
*/
type GetFlagByNameBatchOK struct {

	/*
	  In: Body
	*/
	Payload []*models.Flag `json:"body,omitempty"`
}

// NewGetFlagByNameBatchOK creates GetFlagByNameBatchOK with default headers values
func NewGetFlagByNameBatchOK() *GetFlagByNameBatchOK {

	return &GetFlagByNameBatchOK{}
}

// WithPayload adds the payload to the get flag by name batch o k response
func (o *GetFlagByNameBatchOK) WithPayload(payload []*models.Flag) *GetFlagByNameBatchOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get flag by name batch o k response
func (o *GetFlagByNameBatchOK) SetPayload(payload []*models.Flag) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetFlagByNameBatchOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		payload = make([]*models.Flag, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*GetFlagByNameBatchDefault generic error response

swagger:response getFlagByNameBatchDefault
*/
type GetFlagByNameBatchDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetFlagByNameBatchDefault creates GetFlagByNameBatchDefault with default headers values
func NewGetFlagByNameBatchDefault(code int) *GetFlagByNameBatchDefault {
	if code <= 0 {
		code = 500
	}

	return &GetFlagByNameBatchDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get flag by name batch default response
func (o *GetFlagByNameBatchDefault) WithStatusCode(code int) *GetFlagByNameBatchDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get flag by name batch default response
func (o *GetFlagByNameBatchDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get flag by name batch default response
func (o *GetFlagByNameBatchDefault) WithPayload(payload *models.Error) *GetFlagByNameBatchDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get flag by name batch default response
func (o *GetFlagByNameBatchDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetFlagByNameBatchDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
